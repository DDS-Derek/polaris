// Code generated by ent, DO NOT EDIT.

package storage

import (
	"polaris/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldName, v))
}

// TvPath applies equality check predicate on the "tv_path" field. It's identical to TvPathEQ.
func TvPath(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldTvPath, v))
}

// MoviePath applies equality check predicate on the "movie_path" field. It's identical to MoviePathEQ.
func MoviePath(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldMoviePath, v))
}

// Settings applies equality check predicate on the "settings" field. It's identical to SettingsEQ.
func Settings(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldSettings, v))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldDeleted, v))
}

// Default applies equality check predicate on the "default" field. It's identical to DefaultEQ.
func Default(v bool) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldDefault, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldCreateTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldName, v))
}

// ImplementationEQ applies the EQ predicate on the "implementation" field.
func ImplementationEQ(v Implementation) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldImplementation, v))
}

// ImplementationNEQ applies the NEQ predicate on the "implementation" field.
func ImplementationNEQ(v Implementation) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldImplementation, v))
}

// ImplementationIn applies the In predicate on the "implementation" field.
func ImplementationIn(vs ...Implementation) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldImplementation, vs...))
}

// ImplementationNotIn applies the NotIn predicate on the "implementation" field.
func ImplementationNotIn(vs ...Implementation) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldImplementation, vs...))
}

// TvPathEQ applies the EQ predicate on the "tv_path" field.
func TvPathEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldTvPath, v))
}

// TvPathNEQ applies the NEQ predicate on the "tv_path" field.
func TvPathNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldTvPath, v))
}

// TvPathIn applies the In predicate on the "tv_path" field.
func TvPathIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldTvPath, vs...))
}

// TvPathNotIn applies the NotIn predicate on the "tv_path" field.
func TvPathNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldTvPath, vs...))
}

// TvPathGT applies the GT predicate on the "tv_path" field.
func TvPathGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldTvPath, v))
}

// TvPathGTE applies the GTE predicate on the "tv_path" field.
func TvPathGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldTvPath, v))
}

// TvPathLT applies the LT predicate on the "tv_path" field.
func TvPathLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldTvPath, v))
}

// TvPathLTE applies the LTE predicate on the "tv_path" field.
func TvPathLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldTvPath, v))
}

// TvPathContains applies the Contains predicate on the "tv_path" field.
func TvPathContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldTvPath, v))
}

// TvPathHasPrefix applies the HasPrefix predicate on the "tv_path" field.
func TvPathHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldTvPath, v))
}

// TvPathHasSuffix applies the HasSuffix predicate on the "tv_path" field.
func TvPathHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldTvPath, v))
}

// TvPathIsNil applies the IsNil predicate on the "tv_path" field.
func TvPathIsNil() predicate.Storage {
	return predicate.Storage(sql.FieldIsNull(FieldTvPath))
}

// TvPathNotNil applies the NotNil predicate on the "tv_path" field.
func TvPathNotNil() predicate.Storage {
	return predicate.Storage(sql.FieldNotNull(FieldTvPath))
}

// TvPathEqualFold applies the EqualFold predicate on the "tv_path" field.
func TvPathEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldTvPath, v))
}

// TvPathContainsFold applies the ContainsFold predicate on the "tv_path" field.
func TvPathContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldTvPath, v))
}

// MoviePathEQ applies the EQ predicate on the "movie_path" field.
func MoviePathEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldMoviePath, v))
}

// MoviePathNEQ applies the NEQ predicate on the "movie_path" field.
func MoviePathNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldMoviePath, v))
}

// MoviePathIn applies the In predicate on the "movie_path" field.
func MoviePathIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldMoviePath, vs...))
}

// MoviePathNotIn applies the NotIn predicate on the "movie_path" field.
func MoviePathNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldMoviePath, vs...))
}

// MoviePathGT applies the GT predicate on the "movie_path" field.
func MoviePathGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldMoviePath, v))
}

// MoviePathGTE applies the GTE predicate on the "movie_path" field.
func MoviePathGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldMoviePath, v))
}

// MoviePathLT applies the LT predicate on the "movie_path" field.
func MoviePathLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldMoviePath, v))
}

// MoviePathLTE applies the LTE predicate on the "movie_path" field.
func MoviePathLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldMoviePath, v))
}

// MoviePathContains applies the Contains predicate on the "movie_path" field.
func MoviePathContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldMoviePath, v))
}

// MoviePathHasPrefix applies the HasPrefix predicate on the "movie_path" field.
func MoviePathHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldMoviePath, v))
}

// MoviePathHasSuffix applies the HasSuffix predicate on the "movie_path" field.
func MoviePathHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldMoviePath, v))
}

// MoviePathIsNil applies the IsNil predicate on the "movie_path" field.
func MoviePathIsNil() predicate.Storage {
	return predicate.Storage(sql.FieldIsNull(FieldMoviePath))
}

// MoviePathNotNil applies the NotNil predicate on the "movie_path" field.
func MoviePathNotNil() predicate.Storage {
	return predicate.Storage(sql.FieldNotNull(FieldMoviePath))
}

// MoviePathEqualFold applies the EqualFold predicate on the "movie_path" field.
func MoviePathEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldMoviePath, v))
}

// MoviePathContainsFold applies the ContainsFold predicate on the "movie_path" field.
func MoviePathContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldMoviePath, v))
}

// SettingsEQ applies the EQ predicate on the "settings" field.
func SettingsEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldSettings, v))
}

// SettingsNEQ applies the NEQ predicate on the "settings" field.
func SettingsNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldSettings, v))
}

// SettingsIn applies the In predicate on the "settings" field.
func SettingsIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldSettings, vs...))
}

// SettingsNotIn applies the NotIn predicate on the "settings" field.
func SettingsNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldSettings, vs...))
}

// SettingsGT applies the GT predicate on the "settings" field.
func SettingsGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldSettings, v))
}

// SettingsGTE applies the GTE predicate on the "settings" field.
func SettingsGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldSettings, v))
}

// SettingsLT applies the LT predicate on the "settings" field.
func SettingsLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldSettings, v))
}

// SettingsLTE applies the LTE predicate on the "settings" field.
func SettingsLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldSettings, v))
}

// SettingsContains applies the Contains predicate on the "settings" field.
func SettingsContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldSettings, v))
}

// SettingsHasPrefix applies the HasPrefix predicate on the "settings" field.
func SettingsHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldSettings, v))
}

// SettingsHasSuffix applies the HasSuffix predicate on the "settings" field.
func SettingsHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldSettings, v))
}

// SettingsIsNil applies the IsNil predicate on the "settings" field.
func SettingsIsNil() predicate.Storage {
	return predicate.Storage(sql.FieldIsNull(FieldSettings))
}

// SettingsNotNil applies the NotNil predicate on the "settings" field.
func SettingsNotNil() predicate.Storage {
	return predicate.Storage(sql.FieldNotNull(FieldSettings))
}

// SettingsEqualFold applies the EqualFold predicate on the "settings" field.
func SettingsEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldSettings, v))
}

// SettingsContainsFold applies the ContainsFold predicate on the "settings" field.
func SettingsContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldSettings, v))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldDeleted, v))
}

// DefaultEQ applies the EQ predicate on the "default" field.
func DefaultEQ(v bool) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldDefault, v))
}

// DefaultNEQ applies the NEQ predicate on the "default" field.
func DefaultNEQ(v bool) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldDefault, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldCreateTime, v))
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.Storage {
	return predicate.Storage(sql.FieldIsNull(FieldCreateTime))
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.Storage {
	return predicate.Storage(sql.FieldNotNull(FieldCreateTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Storage) predicate.Storage {
	return predicate.Storage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Storage) predicate.Storage {
	return predicate.Storage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Storage) predicate.Storage {
	return predicate.Storage(sql.NotPredicates(p))
}
