// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"polaris/ent/media"
	"polaris/ent/schema"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Media is the model entity for the Media schema.
type Media struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TmdbID holds the value of the "tmdb_id" field.
	TmdbID int `json:"tmdb_id,omitempty"`
	// ImdbID holds the value of the "imdb_id" field.
	ImdbID string `json:"imdb_id,omitempty"`
	// MediaType holds the value of the "media_type" field.
	MediaType media.MediaType `json:"media_type,omitempty"`
	// NameCn holds the value of the "name_cn" field.
	NameCn string `json:"name_cn,omitempty"`
	// NameEn holds the value of the "name_en" field.
	NameEn string `json:"name_en,omitempty"`
	// OriginalName holds the value of the "original_name" field.
	OriginalName string `json:"original_name,omitempty"`
	// Overview holds the value of the "overview" field.
	Overview string `json:"overview,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// AirDate holds the value of the "air_date" field.
	AirDate string `json:"air_date,omitempty"`
	// Resolution holds the value of the "resolution" field.
	Resolution media.Resolution `json:"resolution,omitempty"`
	// StorageID holds the value of the "storage_id" field.
	StorageID int `json:"storage_id,omitempty"`
	// TargetDir holds the value of the "target_dir" field.
	TargetDir string `json:"target_dir,omitempty"`
	// tv series only
	DownloadHistoryEpisodes bool `json:"download_history_episodes,omitempty"`
	// Limiter holds the value of the "limiter" field.
	Limiter schema.MediaLimiter `json:"limiter,omitempty"`
	// Extras holds the value of the "extras" field.
	Extras schema.MediaExtras `json:"extras,omitempty"`
	// AlternativeTitles holds the value of the "alternative_titles" field.
	AlternativeTitles []schema.AlternativeTilte `json:"alternative_titles,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediaQuery when eager-loading is set.
	Edges        MediaEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MediaEdges holds the relations/edges for other nodes in the graph.
type MediaEdges struct {
	// Episodes holds the value of the episodes edge.
	Episodes []*Episode `json:"episodes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EpisodesOrErr returns the Episodes value or an error if the edge
// was not loaded in eager-loading.
func (e MediaEdges) EpisodesOrErr() ([]*Episode, error) {
	if e.loadedTypes[0] {
		return e.Episodes, nil
	}
	return nil, &NotLoadedError{edge: "episodes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Media) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case media.FieldLimiter, media.FieldExtras, media.FieldAlternativeTitles:
			values[i] = new([]byte)
		case media.FieldDownloadHistoryEpisodes:
			values[i] = new(sql.NullBool)
		case media.FieldID, media.FieldTmdbID, media.FieldStorageID:
			values[i] = new(sql.NullInt64)
		case media.FieldImdbID, media.FieldMediaType, media.FieldNameCn, media.FieldNameEn, media.FieldOriginalName, media.FieldOverview, media.FieldAirDate, media.FieldResolution, media.FieldTargetDir:
			values[i] = new(sql.NullString)
		case media.FieldCreatedAt, media.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Media fields.
func (m *Media) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case media.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case media.FieldTmdbID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tmdb_id", values[i])
			} else if value.Valid {
				m.TmdbID = int(value.Int64)
			}
		case media.FieldImdbID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imdb_id", values[i])
			} else if value.Valid {
				m.ImdbID = value.String
			}
		case media.FieldMediaType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_type", values[i])
			} else if value.Valid {
				m.MediaType = media.MediaType(value.String)
			}
		case media.FieldNameCn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_cn", values[i])
			} else if value.Valid {
				m.NameCn = value.String
			}
		case media.FieldNameEn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_en", values[i])
			} else if value.Valid {
				m.NameEn = value.String
			}
		case media.FieldOriginalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field original_name", values[i])
			} else if value.Valid {
				m.OriginalName = value.String
			}
		case media.FieldOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field overview", values[i])
			} else if value.Valid {
				m.Overview = value.String
			}
		case media.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case media.FieldAirDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field air_date", values[i])
			} else if value.Valid {
				m.AirDate = value.String
			}
		case media.FieldResolution:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resolution", values[i])
			} else if value.Valid {
				m.Resolution = media.Resolution(value.String)
			}
		case media.FieldStorageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field storage_id", values[i])
			} else if value.Valid {
				m.StorageID = int(value.Int64)
			}
		case media.FieldTargetDir:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_dir", values[i])
			} else if value.Valid {
				m.TargetDir = value.String
			}
		case media.FieldDownloadHistoryEpisodes:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field download_history_episodes", values[i])
			} else if value.Valid {
				m.DownloadHistoryEpisodes = value.Bool
			}
		case media.FieldLimiter:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field limiter", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Limiter); err != nil {
					return fmt.Errorf("unmarshal field limiter: %w", err)
				}
			}
		case media.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case media.FieldAlternativeTitles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field alternative_titles", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.AlternativeTitles); err != nil {
					return fmt.Errorf("unmarshal field alternative_titles: %w", err)
				}
			}
		case media.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				m.CreateTime = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Media.
// This includes values selected through modifiers, order, etc.
func (m *Media) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryEpisodes queries the "episodes" edge of the Media entity.
func (m *Media) QueryEpisodes() *EpisodeQuery {
	return NewMediaClient(m.config).QueryEpisodes(m)
}

// Update returns a builder for updating this Media.
// Note that you need to call Media.Unwrap() before calling this method if this Media
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Media) Update() *MediaUpdateOne {
	return NewMediaClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Media entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Media) Unwrap() *Media {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Media is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Media) String() string {
	var builder strings.Builder
	builder.WriteString("Media(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("tmdb_id=")
	builder.WriteString(fmt.Sprintf("%v", m.TmdbID))
	builder.WriteString(", ")
	builder.WriteString("imdb_id=")
	builder.WriteString(m.ImdbID)
	builder.WriteString(", ")
	builder.WriteString("media_type=")
	builder.WriteString(fmt.Sprintf("%v", m.MediaType))
	builder.WriteString(", ")
	builder.WriteString("name_cn=")
	builder.WriteString(m.NameCn)
	builder.WriteString(", ")
	builder.WriteString("name_en=")
	builder.WriteString(m.NameEn)
	builder.WriteString(", ")
	builder.WriteString("original_name=")
	builder.WriteString(m.OriginalName)
	builder.WriteString(", ")
	builder.WriteString("overview=")
	builder.WriteString(m.Overview)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("air_date=")
	builder.WriteString(m.AirDate)
	builder.WriteString(", ")
	builder.WriteString("resolution=")
	builder.WriteString(fmt.Sprintf("%v", m.Resolution))
	builder.WriteString(", ")
	builder.WriteString("storage_id=")
	builder.WriteString(fmt.Sprintf("%v", m.StorageID))
	builder.WriteString(", ")
	builder.WriteString("target_dir=")
	builder.WriteString(m.TargetDir)
	builder.WriteString(", ")
	builder.WriteString("download_history_episodes=")
	builder.WriteString(fmt.Sprintf("%v", m.DownloadHistoryEpisodes))
	builder.WriteString(", ")
	builder.WriteString("limiter=")
	builder.WriteString(fmt.Sprintf("%v", m.Limiter))
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", m.Extras))
	builder.WriteString(", ")
	builder.WriteString("alternative_titles=")
	builder.WriteString(fmt.Sprintf("%v", m.AlternativeTitles))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(m.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MediaSlice is a parsable slice of Media.
type MediaSlice []*Media
